// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client'
import { client } from './client.gen'
import type {
  DeletePostsByIdData,
  DeletePostsByIdErrors,
  DeletePostsByIdResponses,
  GetPostsByIdData,
  GetPostsByIdErrors,
  GetPostsByIdResponses,
  GetPostsData,
  GetPostsResponses,
  PostPostsData,
  PostPostsResponses,
  PutPostsByIdData,
  PutPostsByIdErrors,
  PutPostsByIdResponses,
} from './types.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Returns all posts
 */
export const getPosts = <ThrowOnError extends boolean = false>(
  options?: Options<GetPostsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPostsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/posts',
    ...options,
  })
}

/**
 * Create a new post
 */
export const postPosts = <ThrowOnError extends boolean = false>(
  options: Options<PostPostsData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostPostsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/posts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Delete a post
 */
export const deletePostsById = <ThrowOnError extends boolean = false>(
  options: Options<DeletePostsByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeletePostsByIdResponses,
    DeletePostsByIdErrors,
    ThrowOnError
  >({
    url: '/posts/{id}',
    ...options,
  })
}

/**
 * Get a single post
 */
export const getPostsById = <ThrowOnError extends boolean = false>(
  options: Options<GetPostsByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetPostsByIdResponses,
    GetPostsByIdErrors,
    ThrowOnError
  >({
    url: '/posts/{id}',
    ...options,
  })
}

/**
 * Update a post
 */
export const putPostsById = <ThrowOnError extends boolean = false>(
  options: Options<PutPostsByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    PutPostsByIdResponses,
    PutPostsByIdErrors,
    ThrowOnError
  >({
    url: '/posts/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}
