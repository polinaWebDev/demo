// This file is auto-generated by @hey-api/openapi-ts

import {
  type DefaultError,
  queryOptions,
  type UseMutationOptions,
} from '@tanstack/react-query'

import { client } from '../client.gen'
import {
  deletePostsById,
  getPosts,
  getPostsById,
  type Options,
  postPosts,
  putPostsById,
} from '../sdk.gen'
import type {
  DeletePostsByIdData,
  DeletePostsByIdError,
  DeletePostsByIdResponse,
  GetPostsByIdData,
  GetPostsData,
  PostPostsData,
  PostPostsResponse,
  PutPostsByIdData,
  PutPostsByIdError,
  PutPostsByIdResponse,
} from '../types.gen'

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
    tags?: ReadonlyArray<string>
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (tags) {
    params.tags = tags
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const getPostsQueryKey = (options?: Options<GetPostsData>) =>
  createQueryKey('getPosts', options)

/**
 * Returns all posts
 */
export const getPostsOptions = (options?: Options<GetPostsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getPosts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getPostsQueryKey(options),
  })
}

/**
 * Create a new post
 */
export const postPostsMutation = (
  options?: Partial<Options<PostPostsData>>,
): UseMutationOptions<
  PostPostsResponse,
  DefaultError,
  Options<PostPostsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostPostsResponse,
    DefaultError,
    Options<PostPostsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postPosts({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Delete a post
 */
export const deletePostsByIdMutation = (
  options?: Partial<Options<DeletePostsByIdData>>,
): UseMutationOptions<
  DeletePostsByIdResponse,
  DeletePostsByIdError,
  Options<DeletePostsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeletePostsByIdResponse,
    DeletePostsByIdError,
    Options<DeletePostsByIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deletePostsById({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getPostsByIdQueryKey = (options: Options<GetPostsByIdData>) =>
  createQueryKey('getPostsById', options)

/**
 * Get a single post
 */
export const getPostsByIdOptions = (options: Options<GetPostsByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getPostsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getPostsByIdQueryKey(options),
  })
}

/**
 * Update a post
 */
export const putPostsByIdMutation = (
  options?: Partial<Options<PutPostsByIdData>>,
): UseMutationOptions<
  PutPostsByIdResponse,
  PutPostsByIdError,
  Options<PutPostsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PutPostsByIdResponse,
    PutPostsByIdError,
    Options<PutPostsByIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await putPostsById({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}
